<?php/** @package bp-post-statusThis part of the plugin is a fork of the WP-Statuses plugin, for more details of that see below:GitHub Plugin URI: https://github.com/imath/wp-statuses/*/// Exit if accessed directly.defined( 'ABSPATH' ) || exit;if ( ! class_exists( 'BP_Statuses' ) ) :/** * Main plugin's class * * @package BP Statuses * * @since 1.0.0 */#[AllowDynamicProperties]final class BP_Statuses {	/**	 * Plugin's main instance	 *	 * @var object	 */	protected static $instance;	/**	 * Initialize the plugin	 *	 * @since 1.0.0	 */	private function __construct() {		$this->setup_globals();		$this->inc();		$this->setup_hooks();	}	/**	 * Return an instance of this class.	 *	 * @since 1.0.0	 *	 * @return object A single instance of this class.	 */	public static function start() {		// If the single instance hasn't been set, set it now.		if ( null == self::$instance ) {			self::$instance = new self;		}		return self::$instance;	}	/**	 * Setups plugin's globals	 *	 * @since 1.0.0	 */	private function setup_globals() {		// Version		$this->version = '1.3.0-alpha';		// Domain		$this->domain = 'bp_posts_status';		// Base name		$this->file      = __FILE__;		$this->basename  = plugin_basename( $this->file );		// Path and URL		$this->dir     = plugin_dir_path( $this->file );		$this->url     = plugin_dir_url ( $this->file );		$this->js_url  = trailingslashit( $this->url . 'js' );		$this->inc_dir = trailingslashit( $this->dir . 'inc' );	}	/**	 * Includes plugin's needed files	 *	 * @since 1.0.0	 */	private function inc() {		spl_autoload_register( array( $this, 'autoload' ) );		require( $this->inc_dir . 'core/functions.php' );		/**		 * Filter here to have a preview about how custom statuses		 * are managed by the plugin using:		 * add_filter( 'bp_statuses_use_custom_status', '__return_true' );		 *		 * @since  1.0.0		 *		 * @param  bool $value True to have a demo of the custom status.		 *                     False otherwise.		 */		if ( apply_filters( 'bp_statuses_use_custom_status', false ) ) {			require( $this->inc_dir . 'core/custom.php' );		}	}	/**	 * Setups hooks to register post statuses & load the Administration.	 *	 * @since 1.0.0	 */	private function setup_hooks() {		add_action( 'init', 'bp_statuses_register_password_protected',   10 );		add_action( 'init', 'bp_statuses_register',                    1000 );		// Boot the Admin		if ( is_admin() ) {			add_action( 'plugins_loaded', array( 'BP_Statuses_Admin', 'start' ), 10 );		}	}	/**	 * Class Autoload function	 *	 * @since  1.0.0	 *	 * @param  string $class The class name.	 */	public function autoload( $class ) {		$name = str_replace( '_', '-', strtolower( $class ) );		if ( false === strpos( $name, $this->domain ) ) {			return;		}		$folder = null;		$parts = explode( '-', $name );		if ( isset( $parts[2] ) ) {			$folder = $parts[2];		}		$path = $this->inc_dir . "{$folder}/classes/class-{$name}.php";		// Sanity check.		if ( ! file_exists( $path ) ) {			return;		}		require $path;	}}endif;/** * Boot the plugin. * * @since 1.0.0 */function bp_statuses() {	return BP_Statuses::start();}add_action( 'plugins_loaded', 'bp_statuses', 5 );