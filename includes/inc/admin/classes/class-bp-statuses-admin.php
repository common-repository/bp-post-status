<?php/** * BP Statuses Admin Class. ** @package bp-post-status * * @since 1.0.0 */// Exit if accessed directly.defined( 'ABSPATH' ) || exit;/** * The admin class * * @since  1.0.0 */#[AllowDynamicProperties]class BP_Statuses_Admin {	/**	 * The post type displayed in the Admin screen.	 *	 * @var string	 */	public $post_type = '';	/**	 * The post type object displayed in the Admin screen.	 *	 * @var null|object	 */	public $post_type_object = null;	/**	 * The required capability to publish post types.	 *	 * @var string	 */	public $post_type_capability = 'publish_posts';	/**	 * The custom labels	 *	 * @var  array	 */	public $labels = array();	/**	 * The class constructor.	 *	 * @since  1.0.0	 */	public function __construct() {		$this->hooks();	}	/**	 * Starts the Admin class	 *	 * @since 1.0.0	 */	public static function start() {		if ( ! is_admin() ) {			return;		}		$bp_statuses = bp_statuses();		if ( empty( $bp_statuses->admin ) ) {			$bp_statuses->admin = new self;		}		return $bp_statuses->admin;	}	/**	 * Setups the action and filters to hook to	 *	 * @since 1.0.0	 */	private function hooks() {		add_action( 'admin_enqueue_scripts', array( $this, 'register_script' ),  1, 1 );		add_action( 'add_meta_boxes',        array( $this, 'add_meta_box' ),    10, 2 );		// Press This		add_filter( 'press_this_save_post',  array( $this, 'reset_status' ),    10, 1 );	}	/**	 * Register and enqueue needed scripts and css.	 *	 * @since  1.0.0	 */	public function register_script( $press_this = '' ) {		// Editor's screen		wp_register_script(			'wp-statuses',			sprintf( '%1$sscript%2$s.js', bp_statuses_js_url(), bp_statuses_min_suffix() ),			array( 'jquery', 'post' ),			bp_statuses_version(),			true		);		// Regular Admin screens.		if ( 'press-this.php' !== $press_this ) {			$current_screen = get_current_screen();			// Bail if the post type is not supported.			if ( isset( $current_screen->post_type ) && ! bp_statuses_is_post_type_supported( $current_screen->post_type ) ) {				return;			}			if ( isset( $current_screen->base ) && in_array( $current_screen->base, array( 'page', 'post' ), true ) ) {				wp_add_inline_style( 'edit', '					#wp-statuses-publish-box .inside {						margin: 0;						padding: 0;					}					#wp-statuses-dropdown {						width: calc( 100% - 29px );					}					#misc-publishing-actions .misc-pub-section span.dashicons {						vertical-align: middle;						color: #82878c;						padding-right: 3px;					}				' );			}			// List tables screens			if ( isset( $current_screen->base ) && 'edit' === $current_screen->base && ! empty( $current_screen->post_type ) ) {				$inline_statuses = bp_statuses_get_statuses( $current_screen->post_type, 'inline' );				$statuses        = array();				foreach ( $inline_statuses as $inline_status ) {					if ( ! current_user_can( $this->post_type_capability ) && ! in_array( $inline_status->name, array( 'draft', 'pending' ), true ) ) {						continue;					}					$statuses[ $inline_status->name ] = $inline_status->labels['inline_dropdown'];				}				$bulk_statuses = $statuses;				unset( $bulk_statuses['password'] );				if ( ! empty( $inline_statuses ) ) {					wp_enqueue_script(						'wp-statuses-inline',						sprintf( '%1$sinline-script%2$s.js', bp_statuses_js_url(), bp_statuses_min_suffix() ),						array( 'inline-edit-post' ),						bp_statuses_version(),						true					);					wp_localize_script( 'wp-statuses-inline', 'wpStatusesInline', array(						'inline'       => $statuses,						'bulk'         => $bulk_statuses,						'bulk_default' =>  sanitize_text_field(esc_attr__(  '&mdash; No Change &mdash;', 'bp-post-status' )),					) );				}			}		// Press This specific screen		} else {			$pressthis_statuses = bp_statuses_get_statuses( 'post', 'press_this' );			$statuses           = array();			foreach ( $pressthis_statuses as $pressthis_status ) {				// Only include Press this statuses if the user can use them.				if ( ! current_user_can( $this->post_type_capability ) ) {					continue;				}				$statuses[ $pressthis_status->name ] = $pressthis_status->labels['press_this_dropdown'];			}			if ( ! empty( $statuses ) ) {				wp_enqueue_script(					'wp-statuses-press-this',					sprintf( '%1$spress-this-script%2$s.js', bp_statuses_js_url(), bp_statuses_min_suffix() ),					array( 'press-this' ),					bp_statuses_version(),					true				);				wp_localize_script( 'wp-statuses-press-this', 'wpStatusesPressThis', array(					'statuses' => $statuses,				) );			}		}	}	/**	 * Replace the WordPress Publish metabox by plugin's one.	 *	 * @since  1.0.0	 *	 * @param string  $post_type The displayed post type.	 * @param WP_Post $post      The post object.	 */	public function add_meta_box( $post_type, $post ) {		global $publish_callback_args;		// Bail if the Post Type is not supported.		if ( ! bp_statuses_is_post_type_supported( $post_type ) ) {			return;		}		// Remove the built-in Publish meta box.		remove_meta_box( 'submitdiv', get_current_screen(), 'side' );		// Use plugin's Publishing box instead.		add_meta_box(			'wp-statuses-publish-box',			__( 'Publishing', 'bp-post-status' ),			array( $this, 'publishing_box' ),			$post_type,			'side',			'high',			$publish_callback_args		);		// Validate the post type.		$this->post_type_object = get_post_type_object( $post_type );		if ( is_a( $this->post_type_object, 'WP_Post_Type' ) ) {			$this->post_type            = $post_type;			$this->post_type_capability = $this->post_type_object->cap->edit_posts;		}	}	/**	 * The Publishing metabox.	 *	 * @since  1.0.0	 *	 * @param  WP_Post $post The displayed post object.	 * @param  array  $args  Additional arguments (eg: revisions' count).	 */	public function publishing_box( $post = null, $args = array() ) {		if ( empty( $post->post_type ) ) {			return;		}		$status = $post->post_status;		if ( 'auto-draft' === $status ) {			$status = 'draft';		} elseif ( ! empty( $post->post_password ) ) {			$status = 'password';		}		// Get the customizable labels		$statuses_labels = bp_statuses_get_metabox_labels( $post->post_type );		foreach ( $statuses_labels as $status_name => $labels_list ) {			$this->labels[ $status_name ] = wp_array_slice_assoc( $labels_list, array(				'metabox_submit',				'metabox_save_on',				'metabox_save_date',				'metabox_saved_on',				'metabox_saved_date',				'metabox_save_now',				'metabox_save_later',			) );		}		// Load script for the metabox.		wp_enqueue_script ( 'wp-statuses' );		wp_localize_script( 'wp-statuses', 'wpStatuses', array(			'status'          => $status,			'attributes'      => array(				'password' => $post->post_password,				'sticky'   => is_sticky( $post->ID ),			),			'strings' => array(				'previewChanges' =>  sanitize_text_field(esc_attr__(  'Preview Changes', 'bp-post-status' )),				'preview'        =>  sanitize_text_field(esc_attr__(  'Preview', 'bp-post-status' )),				'labels'         => $this->labels,			),			'public_statuses' => bp_statuses_get_public_statuses( $post->post_type ),		) ); ?>		<div class="submitbox" id="submitpost">			<div id="minor-publishing">				<?php				/**				 * Take care of minor publishing actions.				 */				$this->get_minor_publishing_div( $post, $status ); ?>				<div id="misc-publishing-actions">					<?php					/**					 * Split actions for a better lisibility.					 */					$this->get_status_publishing_div( $post, $status );					$this->get_status_extra_attributes( $post, $status );					$this->get_time_publishing_div( $post, $status, $args ); ?>				</div><!-- #misc-publishing-actions -->				<div class="clear"></div>			</div><!-- #minor-publishing -->			<div id="major-publishing-actions">				<?php $this->get_major_publishing_div( $post, $status ); ?>				<div class="clear"></div>			</div><!-- #major-publishing-actions -->		</div><!-- #submitpost -->		<?php	}	/**	 * Output the minor publishing actions.	 *	 * @since  1.0.0	 *	 * @param  WP_Post $post   The displayed Post object.	 * @param  string  $status The Post's status.	 */	public function get_minor_publishing_div( $post = null, $status = '' ) {		if ( empty( $post->post_type ) || empty( $status ) ) {			return;		}		// Hidden submit button early on so that the browser chooses the right button when form is submitted with Return key		?>		<div style="display:none;">			<?php submit_button(  sanitize_text_field(esc_attr__(  'Save', 'bp-post-status' ), '', 'save' )); ?>		</div>		<div id="minor-publishing-actions">			<div id="save-action">				<?php if ( 'draft' === $status && isset( $this->labels['draft'] ) ) : ?>					<input type="submit" name="save" id="save-post" value="<?php sanitize_text_field(esc_attr_e( 'Save Draft', 'bp-post-status' )); ?>" class="button" />				<?php elseif ( 'pending' === $status && current_user_can( $this->post_type_capability ) ) : ?>					<input type="submit" name="save" id="save-post" value="<?php sanitize_text_field(esc_attr_e( 'Save as Pending', 'bp-post-status' )); ?>" class="button" />				<?php endif ; ?>				<span class="spinner"></span>			</div>			<?php if ( is_post_type_viewable( $this->post_type_object ) ) : ?>				<div id="preview-action">					<?php printf( '<a class="preview button" href="%1$s" target="wp-preview-%2$s" id="post-preview">%3$s</a>',						esc_url( get_preview_post_link( $post ) ),						(int) $post->ID,						'publish' === $status ? esc_html__( 'Preview Changes', 'bp-post-status' ) : esc_html__( 'Preview', 'bp-post-status' )					); ?>					<input type="hidden" name="wp-preview" id="wp-preview" value="" />				</div>			<?php endif;			/**			 * Fires before the post time/date setting in the Publish meta box.			 *			 * @since WordPress 4.4.0			 *			 * @param WP_Post $post WP_Post object for the current post.			 */			do_action( 'post_submitbox_minor_actions', $post ); ?>			<div class="clear"></div>		</div><!-- #minor-publishing-actions -->		<?php	}	/**	 * Output the statuses dropdown.	 *	 * @since  1.0.0	 *	 * @param  WP_Post $post    The displayed Post object.	 * @param  string  $current The Post's status.	 */	public function get_status_publishing_div( $post = null, $current = '' ) {		if ( empty( $post->post_type ) || empty( $current ) ) {			return;		}		$statuses = bp_statuses_get_statuses( $post->post_type );		$options        = array( '<select name="post_status" id="wp-statuses-dropdown">' );		$dashicon       = 'dashicons-post-status';		$status_display = '';		foreach ( $statuses as $status ) {			$current_status = $current;			$value          = $status->name;			// Password is a publish status			if ( 'password' === $status->name ) {				$value = 'publish';				// Or a scheduled one.				if ( 'password' === $current && 'future' === $post->post_status ) {					$value = 'future';				}			}			// Future will become a publish status			if ( 'future' === $current ) {				$current_status = 'publish';				// Set the Published status as future.				if ( 'publish' === $status->name ) {					$value = 'future';				}			}			$selected = selected( $current_status, $status->name, false );			if ( $selected ) {				$dashicon       = $status->dashicon;				$status_display = $status->labels['metabox_dropdown'];			}			if ( in_array( $status->name, array( 'publish', 'group_post', 'members_only' ) ) && ! current_user_can ( 'publish_posts' ) ) {				goto skip;			}			$options[] = '<option value="' . esc_attr( $value ) .'" ' . $selected . ' data-dashicon="' . esc_attr( $status->dashicon ) . '" data-status="' . $status->name . '">' . esc_html( $status->labels['metabox_dropdown'] ) . '</option>';			skip:		}		if ( ! current_user_can( $this->post_type_capability ) ) {			$options = array(				sprintf( '<input type="hidden" name="post_status" value="%s">', esc_attr( $current ) ),				sprintf( '<span id="post-status-display">%s</span>', $status_display ),			);		} else {			$options[] = '</select>';		}		?>		<div class="misc-pub-section">			<label for="post_status" class="screen-reader-text"><?php esc_html_e( 'Set status', 'bp-post-status' ); ?></label>			<?php printf(				'<span class="dashicons %1$s"></span> %2$s',				sanitize_html_class( $dashicon ),				join( "\n", $options)			);			/**			 * As WordPress is overriding the $_POST global inside _wp_translate_postdata()			 * We'll use this input to remember what was the real posted status.			 *			 * @see this part of the code, around line 100 of wp-admin/includes/post.php :			 * if ( isset($post_data['publish']) && ( '' != $post_data['publish'] ) && ( !isset($post_data['post_status']) || $post_data['post_status'] != 'private' ) )			 *	$post_data['post_status'] = 'publish';			 */			?>			<input type="hidden" name="_wp_statuses_status" id="wp-statuses-status" value="<?php echo $current; ?>"/>		</div><!-- .misc-pub-section -->		<?php	}	/**	 * Output Extra attributes according to the status.	 *	 * @since  1.0.0	 *	 * @param  WP_Post $post   The displayed Post object.	 * @param  string  $status The Post's status.	 */	public function get_status_extra_attributes( $post = null, $status = '' ) {		if ( empty( $post->post_type ) || empty( $status ) || ! current_user_can( $this->post_type_capability ) ) {			return;		}		$master_group_disable = $this->bpps_core_posts_disabled( 'groups' );		$master_group_user_can_post = $this->bpps_core_user_can_post( 'groups' );		$master_group_notif_enable = $this->bpps_core_posts_notify_enabled( 'groups' );		$user_can_notify = $this->bpps_core_user_can_notify( 'groups' );		$master_friends_disable = $this->bpps_core_posts_disabled( 'friends' );		$friends_can_post = $this->bpps_core_user_can_post( 'friends' );		$master_friends_notif_enable = $this->bpps_core_posts_notify_enabled( 'friends' );		$friends_can_notify = $this->bpps_core_user_can_notify( 'friends' );		$master_members_disable = $this->bpps_core_posts_disabled( 'members' );		$members_can_post = $this->bpps_core_user_can_post( 'members' );		$master_members_notif_enable = $this->bpps_core_posts_notify_enabled( 'members' );		$members_can_notify = $this->bpps_core_user_can_notify( 'members' );		$master_following_disable = $this->bpps_core_posts_disabled( 'following' );		$following_user_can_post = $this->bpps_core_user_can_post( 'following' );		$master_following_notif_enable = $this->bpps_core_posts_notify_enabled( 'following' );		$following_user_can_notify = $this->bpps_core_user_can_notify( 'following' );		$master_followed_disable = $this->bpps_core_posts_disabled( 'followed' );		$followed_user_can_post = $this->bpps_core_user_can_post( 'followed' );		$master_followed_notif_enable = $this->bpps_core_posts_notify_enabled( 'followed' );		$followed_user_can_notify = $this->bpps_core_user_can_notify( 'followed' );		$sticky_class = $password_class = $group_class = $notify_class = $group_post_status_class = 'hide-if-js';		if ( ( $post->post_status != 'group_post' ) && ( $post->post_status != 'following' ) && ( $post->post_status != 'followed' ) && ( $post->post_status != 'friends_only' ) && ( $post->post_status != 'members_only' ) ) {						if ( bp_statuses_is_public( $status ) && ! $post->post_password  ) {				$sticky_class = '';			}			if ( bp_statuses_is_public( $status ) && ! $post->post_password  ) {				$sticky_class = '';			}		}		if ( ( $post->post_status == 'friends_only' && ! $master_friends_disable ) || ( $post->post_status == 'members_only' && $master_members_disable != 1 ) || ( $post->post_status == 'following' && ! $master_following_disable ) || ( $post->post_status == 'followed' && ! $master_followed_disable ) ) {						$notify_class = '';					}				if ( 'private' !== $status && ! empty( $post->post_password ) ) {			$password_class = '';		}		?>		<div class="misc-pub-section misc-pub-attributes" id="wp-statuses-attibutes">			<div id="post-attibutes-input">				<?php if ( 'post' === $post->post_type && current_user_can( 'edit_others_posts' ) ) : ?>					<span id="sticky-span" class="<?php echo sanitize_html_class( $sticky_class ); ?> wp-statuses-attribute-container">						<input id="sticky" name="sticky" type="checkbox" value="sticky" <?php checked( is_sticky( $post->ID ) ); ?> />						<label for="sticky" class="selectit">							<?php esc_html_e( 'Stick this post to the front page', 'bp-post-status' ); ?>						</label>						<br />					</span>				<?php endif ; ?>				<span id="password-span" class="<?php echo sanitize_html_class( $password_class ); ?> wp-statuses-attribute-container">					<label for="post_password"><?php sanitize_text_field(esc_attr_e( 'Password:', 'bp-post-status' )); ?></label>					<input type="text" name="post_password" id="post_password" value="<?php echo esc_attr( $post->post_password ); ?>"  maxlength="255" />					<br />				</span>				<?php										// Mods for BP Post Status - Group only posts + notifications				if (  bp_is_active( 'groups' ) && ! $master_group_disable && $master_group_user_can_post && groups_total_groups_for_user( bp_displayed_user_id() ) ) {					if ( ! $master_group_disable ) {																		if ( $post->post_status == 'group_post' || $post->post_status == 'group_post_pending' ) { $group_class = ''; } ?>											<span id="group-span" class="<?php echo sanitize_html_class( $group_class ); ?> wp-statuses-attribute-container">						<label for="post_group"><?php sanitize_text_field(esc_attr_e( 'Group:', 'bp-post-status' )); ?></label>												<?php 												$user_id = get_current_user_id();						$groups = BP_Groups_Member::get_group_ids( $user_id, 100 );						$groups = $groups['groups'];						$stored_meta = get_post_meta( $post->ID );												if ( isset( $stored_meta['bpgps_group'] ) ) {														$selected_group = $stored_meta['bpgps_group'][0];							$current_group_lookup = $this->bpps_core_group_lookup( $user_id, $selected_group );							$current_group_posts_disabled = $current_group_lookup[0];							$current_group_user_can_post = $current_group_lookup[1];							$current_group_notif_enabled = $current_group_lookup[2];							$current_group_user_can_notif = $current_group_lookup[3];						}																								foreach ( $groups as $group_id ) {														$group_lookup = $this->bpps_core_group_lookup( $user_id, $group_id );							$group_posts_disabled = $group_lookup[0];							$group_user_can_post = $group_lookup[1];							$group_notiv_enabled = $group_lookup[2];							$group_user_can_notif = $group_lookup[3];														if ( $group_notiv_enabled == 0 || $master_group_notif_enable == 0 || $user_can_notify == 0 || $group_user_can_notif == 0 ) {																$notif = 0;														} else {																$notif = 1;														}														if ( $group_posts_disabled == 0 && $group_user_can_post ) {																$group_list[$group_id] = $notif;														}												}															wp_nonce_field( basename( __FILE__ ), 'bpps_post_status_nonce' ); ?>											<select name="post_group" id="bpps-groups-dropdown">												<?php 												foreach ( $group_list as $id => $notif ) {														$group = groups_get_group($id);?>							<option id="post_group" value="<?php echo esc_attr($id);?>" <?php if ( $notif ) { echo 'data-notif="1" '; } else { echo 'data-notif="0"'; }?><?php 														if (isset( $stored_meta['bpgps_group'] ) ) : echo esc_attr($stored_meta['bpgps_group'][0]) == $id ? 'selected="selected"' : ''; endif; ?>><?php								echo esc_attr($group->name); ?></option>												<?php } ?>											</select>				</span>								<?php 	}				}												if ( bp_is_active( 'notifications' ) ) : 								if ( $user_can_notify && isset($stored_meta['bpgps_group']) && ( $post->post_status == 'group_post' || $post->post_status == 'group_post_pending' ) && ! $master_group_disable ) {										$group_post_status_class = '';											if (  $master_group_notif_enable && $master_group_user_can_post && $current_group_user_can_notif ==1 && $current_group_notif_enabled == 1 ) {												$notify_class='';										}				}								if ( bp_is_active( 'friends' ) && $post->post_status == 'friends_only' && $friends_can_post && ! $master_friends_disable && ! $friends_notif_disable && $friends_can_notify && $master_friends_notif_enable ) {										$notify_class = '';				}								if ( class_exists( 'BP_Follow_Component' ) && $post->post_status == 'following' && $following_user_can_post && ! $master_following_disable && $following_user_can_notify && $master_following_notif_enable ) {										$notify_class = '';				}				if ( class_exists( 'BP_Follow_Component' ) && $post->post_status == 'followed' && $followed_user_can_post && ! $master_followed_disable && $followed_user_can_notify && $master_followed_notif_enable ) {										$notify_class = '';				}				if ( ( $post->post_status == 'members_only' || $post->post_status == 'members_only_pending' ) && $members_can_post && ! $master_members_disable && ! $master_members_notif_enable && $members_can_notify ) {										$notify_class = '';				}								if ( $master_friends_notif_enable == 1 && $friends_can_notify == 1 && $master_members_notif_enable == 1 && $members_can_notify == 1 ) {										$data_notif = 'both';								} else if ( $master_friends_notif_enable == 1 && $friends_can_notify == 1 ) {										$data_notif = 'friends';									} else if ( $master_members_notif_enable == 1 && $members_can_notify == 1 ) {										$data_notif = 'members';									} else {										$data_notif = 'none';									}								if ( bp_is_active( 'groups' ) && ! $master_group_disable && $master_group_user_can_post && groups_total_groups_for_user( bp_displayed_user_id() ) ) {					?>					<br>					<span id="group-status-span" class="<?php echo sanitize_html_class( $group_post_status_class ); ?> wp-statuses-attribute-container">					<label for="group_post_status"><?php sanitize_text_field(esc_attr_e( 'Visibility:', 'bp-post-status' )); ?></label>												<select name="group_post_status" id="bpps-groups-status-dropdown">														<?php 														$status_options = array(								'group_only' 	=>  sanitize_text_field(esc_attr__( 'Group Only', 'bp-post-status' )),								'members_only' 	=>  sanitize_text_field(esc_attr__( 'Members Only', 'bp-post-status' )),								'public'		=>  sanitize_text_field(esc_attr__( 'Public', 'bp-post-status' ))								);															foreach ( $status_options as $status => $label ) {																?>																<option id="group_post_status" value="<?php echo esc_attr($status);?>" <?php 																if (isset( $stored_meta['bpgps_group_post_status'] ) ) : echo esc_attr($stored_meta['bpgps_group_post_status'][0]) == $status ? 'selected="selected"' : ''; endif; ?>><?php									echo esc_attr($label); ?></option>														<?php } ?>													</select>					</span>						<br>						<?php } ?>				<span id="notify-span" data-notif="<?php echo esc_attr($data_notif); ?>" class="<?php echo sanitize_html_class( $notify_class ); ?> wp-statuses-attribute-container">					<input type="checkbox" name="post_notify" id="bpps-post-notify">										<label for="post_notify"><?php sanitize_text_field(esc_attr_e( 'Notify', 'bp-post-status' )); ?></label>							</span>								<?php								endif;								/**				 * Hook here if you need to add some extra attibutes for your custom status.				 *				 * @since 1.0.0				 *				 * @param WP_Post $post   The Post object.				 * @param string  $status The current status for the post.				 */				do_action( 'bp_statuses_metabox_extra_attributes', $post, $status );?>			</div>		</div><!-- .misc-pub-attributes -->		<?php	}	public static function bpps_core_group_lookup( $user_id, $group_id ) {		$group_data = groups_get_groupmeta( $group_id );										if ( isset( $group_data['bpps_creator'] ) ) {						$required_role = $group_data['bpps_creator'][0];				} else {						$required_role = 'member';				}				if ( isset( $group_data['bpps_notifier'] ) ) {						$notifier_role = $group_data['bpps_notifier'][0];				} else {						$notifier_role = 'member';				}				if ( isset( $group_data['bpps_is_disabled'] ) ) {						$group_posts_disabled = $group_data['bpps_is_disabled'][0];				} else {						$group_posts_disabled = 0;				}			if ( isset( $group_data['bpps_notif_active'] ) ) {						$group_notiv_enabled = $group_data['bpps_notif_active'][0];				} else {						$group_notiv_enabled = 0;				}		$member = groups_is_user_member( $user_id, $group_id );		$mod = groups_is_user_mod($user_id, $group_id );		$admin = groups_is_user_admin( $user_id, $group_id );				switch ( $required_role ) {						case 'member':				if ( $member || $admin || $mod ) {					$allowed = 1;				}				break;						case 'moderator':				if ( $admin || $mod ) {					$allowed = 1;				}				break;						case 'administrator':				if ( $admin ) {					$allowed = 1;				}				break;						default :				$allowed = 1;				break;		}				switch ( $notifier_role ) {						case 'member':				if ( $member || $admin || $mod ) {					$notif_allowed = 1;				}				break;						case 'moderator':				if ( $admin || $mod ) {					$notif_allowed = 1;				}				break;						case 'administrator':				if ( $admin ) {					$notif_allowed = 1;				}				break;						default :				$notif_allowed = 0;				break;				}				return array( $group_posts_disabled, $allowed, $group_notiv_enabled, $notif_allowed ) ;			}			public static function bpps_core_posts_disabled( $component ) {		if ( $component == 'friends' ) {			$settings = get_option( "bpps_friends_settings" );		} else if ( $component == 'groups' ) {			$settings = get_option( "bpps_groups_settings" );		} else if ( $component == 'members' ) {			$settings = get_option( "bpps_members_settings" );		} else if ( $component == 'followed' ) {			$settings = get_option( 'bpps_followed_settings' );		} else if ( $component == 'following' ) {			$settings = get_option( 'bpps_following_settings' );		}				//General limitations set in Admin						if ( isset( $settings[ $component . '_disable'] ) ) {						return $settings[ $component . '_disable'];				} else {						return false;		}			}			public static function bpps_core_user_can_post( $component ) {		if ( $component == 'friends' ) {			$settings = get_option( "bpps_friends_settings" );		} else if ( $component == 'groups' ) {			$settings = get_option( "bpps_groups_settings" );		} else if ( $component == 'members' ) {			$settings = get_option( "bpps_members_settings" );		} else if ( $component == 'followed' ) {			$settings = get_option( 'bpps_followed_settings' );		} else if ( $component == 'following' ) {			$settings = get_option( 'bpps_following_settings' );		}			if ( isset( $settings[ $component . '_cap'] ) ) {						return current_user_can( $settings[ $component . '_cap'] );				} else {						return current_user_can( 'edit_posts' );				}			}			public static function bpps_core_posts_notify_enabled( $component ) {				if ( $component == 'friends' ) {			$settings = get_option( "bpps_friends_settings" );		} else if ( $component == 'groups' ) {			$settings = get_option( "bpps_groups_settings" );		} else if ( $component == 'members' ) {			$settings = get_option( "bpps_members_settings" );		} else if ( $component == 'followed' ) {			$settings = get_option( 'bpps_followed_settings' );		} else if ( $component == 'following' ) {			$settings = get_option( 'bpps_following_settings' );		}		if ( isset( $settings[ $component . '_notif_enable'] ) ) {						return $settings[ $component . '_notif_enable'];				} else {						return false;				}			}		public static function bpps_core_user_can_notify( $component ) {				if ( $component == 'friends' ) {			$settings = get_option( "bpps_friends_settings" );		} else if ( $component == 'groups' ) {			$settings = get_option( "bpps_groups_settings" );		} else if ( $component == 'members' ) {			$settings = get_option( "bpps_members_settings" );		} else if ( $component == 'followed' ) {			$settings = get_option( 'bpps_followed_settings' );		} else if ( $component == 'following' ) {			$settings = get_option( 'bpps_following_settings' );		}				if ( isset( $settings[ $component . '_notif_cap'] ) ) {						return current_user_can( $settings[ $component . '_notif_cap'] );				} else {						return current_user_can( 'edit_posts' );				}			}	/**	 * Output the time's selector & revisions' browser.	 *	 * @since  1.0.0	 *	 * @param  WP_Post $post   The displayed Post object.	 * @param  string  $status The Post's status.	 */	public function get_time_publishing_div( $post = null, $status = '', $args = array() ) {		if ( empty( $post->post_type ) || empty( $status ) || ! current_user_can( $this->post_type_capability ) ) {			return;		}		global $action;		$is_future = time() < strtotime( $post->post_date_gmt . ' +0000' );		/* translators: Publish box date format, see https://secure.php.net/date */		$datef =  sanitize_text_field(esc_attr__(  'M j, Y @ H:i', 'bp-post-status' ));		// Default stamps.		$stamps = array(			'metabox_save_later' =>  sanitize_text_field(esc_attr__(  'Schedule for: <b>%1$s</b>', 'bp-post-status' )),			'metabox_saved_date' =>  sanitize_text_field(esc_attr__(  'Saved on: <b>%1$s</b>', 'bp-post-status' )),			'metabox_save_now'   =>  sanitize_text_field(esc_attr__(  'Save <b>now</b>', 'bp-post-status' )),			'metabox_save_date'  =>  sanitize_text_field(esc_attr__(  'Save on: <b>%1$s</b>', 'bp-post-status' )),		);		if ( isset( $this->labels[ $status ] ) ) {			$stamps = wp_parse_args( $this->labels[ $status ], $stamps );		}		// Post already exists.		if ( 0 !== (int) $post->ID ) {			// scheduled for publishing at a future date.			if ( 'future' === $status || ( 'draft' !== $status && $is_future ) ) {					$stamp = $stamps['metabox_save_later'];			// already published.			} elseif ( ! in_array( $status, array( 'draft', 'future', 'pending' ), true ) ) {				$stamp = $stamps['metabox_saved_date'];			// draft, 1 or more saves, no date specified.			} elseif ( '0000-00-00 00:00:00' === $post->post_date_gmt ) {				$stamp = $stamps['metabox_save_now'];			// draft, 1 or more saves, future date specified.			} elseif ( $is_future ) {				$stamp = $stamps['metabox_save_later'];			// draft, 1 or more saves, date specified.			} else {				$stamp = $stamps['metabox_save_date'];			}			$date = date_i18n( $datef, strtotime( $post->post_date ) );		// draft (no saves, and thus no date specified).		} else {			$stamp = $stamps['metabox_save_now'];			$date = date_i18n( $datef, strtotime( current_time( 'mysql' ) ) );		}		if ( ! empty( $args['args']['revisions_count'] ) ) : ?>			<div class="misc-pub-section misc-pub-revisions">				<?php					/* translators: Post revisions heading. 1: The number of available revisions */					printf(  sanitize_text_field(esc_attr__(  'Revisions: %s', 'bp-post-status' )), '<b>' . esc_attr(number_format_i18n( $args['args']['revisions_count'] )) . '</b>' );				?>				<a class="hide-if-no-js" href="<?php echo esc_url( get_edit_post_link( $args['args']['revision_id'] ) ); ?>">					<span aria-hidden="true"><?php echo esc_html_x( 'Browse', 'revisions', 'bp-post-status' ); ?></span>					<span class="screen-reader-text"><?php esc_html_e( 'Browse revisions', 'bp-post-status' ); ?></span>				</a>			</div><!-- .misc-pub-revisions -->		<?php endif; ?>			<div class="misc-pub-section curtime misc-pub-curtime">				<span id="timestamp">					<?php printf( esc_attr($stamp), esc_attr($date )); ?>				</span>				<a href="#edit_timestamp" class="edit-timestamp hide-if-no-js" role="button">					<span aria-hidden="true"><?php sanitize_text_field(esc_attr_e( 'Edit', 'bp-post-status' )); ?></span>					<span class="screen-reader-text"><?php sanitize_text_field(esc_attr_e( 'Edit date and time', 'bp-post-status' )); ?></span>				</a>				<fieldset id="timestampdiv" class="hide-if-js">					<legend class="screen-reader-text"><?php sanitize_text_field(esc_attr_e( 'Date and time', 'bp-post-status' )); ?></legend>					<?php touch_time( ( $action === 'edit' ), 1 ); ?>				</fieldset>			</div><!-- .misc-pub-curtime -->		<?php		/**		 * Fires after the post time/date setting in the Publish meta box.		 *		 * @since WordPress 2.9.0		 * @since WordPress 4.4.0 Added the `$post` parameter.		 *		 * @param WP_Post $post WP_Post object for the current post.		 */		do_action( 'post_submitbox_misc_actions', $post );	}	/**	 * Output the major actions of the metabox.	 *	 * @since  1.0.0	 *	 * @param  WP_Post $post   The displayed Post object.	 * @param  string  $status The Post's status.	 */	public function get_major_publishing_div( $post = null, $status = '' ) {		if ( empty( $post->post_type ) || empty( $status ) ) {			return;		}		// Default is submit box's default value.		$text = '';		if ( isset( $this->labels[ $status ]['metabox_submit'] ) ) {			$text = $this->labels[ $status ]['metabox_submit'];		}		// Submit input arguments.		$args = array(			'text'             => $text,			'type'             => 'primary large',			'name'             => 'save',			'wrap'             => false,			'other_attributes' => array( 'id' => 'publish' ),		);		$default_labels = reset( $this->labels );		$default_status = key( $this->labels );		// The current post type does not support the Publish status.		if ( 'publish' !== $default_status ) {			$args['text'] =  sanitize_text_field(esc_attr__(  'Save', 'bp-post-status' ));			if ( isset( $default_labels['metabox_submit'] ) ) {				$args['text'] = $default_labels['metabox_submit'];			}		// The current post type supports the Publish status.		} elseif ( in_array( $status, array( 'draft', 'pending' ), true ) || 0 === (int) $post->ID ) {			$args = array_merge( $args, array(				'text' =>  sanitize_text_field(esc_attr__(  'Submit for Review', 'bp-post-status' )),				'name' => 'publish',			) );			if ( current_user_can( 'publish_posts' ) ) {				$args['text'] =  sanitize_text_field(esc_attr__(  'Publish', 'bp-post-status' ));				if ( ! empty( $post->post_date_gmt ) && time() < strtotime( $post->post_date_gmt . ' +0000' ) ) {					$args['text'] =  sanitize_text_field(esc_attr__(  'Schedule', 'bp-post-status' ));				}			}		}		/**		 * Fires at the beginning of the publishing actions section of the Publish meta box.		 *		 * @since WordPress 2.7.0		 */		do_action( 'post_submitbox_start' ); ?>		<div id="delete-action">			<?php if ( current_user_can( "delete_post", $post->ID ) ) : ?>				<a class="submitdelete deletion" href="<?php echo esc_url( get_delete_post_link( $post->ID ) ); ?>">					<?php ! EMPTY_TRASH_DAYS ? esc_html_e( 'Delete Permanently', 'bp-post-status' ) : esc_html_e( 'Move to Trash', 'bp-post-status' ); ?>				</a>			<?php endif ; ?>		</div>		<div id="publishing-action">			<span class="spinner"></span>			<?php submit_button( $args['text'], $args['type'], $args['name'], $args['wrap'], $args['other_attributes'] ); ?>		</div>		<?php	}	/**	 * Reset the Press This posted post status if needed.	 *	 * @since  1.1.0	 *	 * @param  array  $post_data The list of Post data.	 * @return array             The list of Post data.	 */	public function reset_status( $post_data = array() ) {		if ( empty( $_POST['_bp_statuses_status'] ) ) {			return $post_data;		}		// Validdate the status		$status = get_post_status_object( $_POST['_bp_statuses_status'] );		if ( ! $status ) {			return $post_data;		}		return array_merge( $post_data, array(			'post_status' => $status->name,		) );	}}